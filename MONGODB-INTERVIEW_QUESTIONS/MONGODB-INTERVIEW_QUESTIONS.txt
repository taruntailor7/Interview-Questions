Q.1 What are SQL Databases? What are some companies that use Mongo, what type of applications are these?
Sol: SQL stands for Structured Query Language. It's used for relational databases. A SQL database is a collection of tables that stores a 
    specific set of structured data.
    
    Currently, more than 31,000 companies are using MongoDB to build scalable applications and accelerate digital innovation. Leading companies
    like Forbes, Toyota, Flobiz, Marcello, and others are MongoDB customers.

    MongoDB performs brilliantly in applications that require data to be unstructured. For instance, various MapReduce Applications, Big-Data 
    systems,Social Networking applications, News Forums, etc. In such use-cases, it is difficult to structure data across tables.

Q.2 What are NoSQL Databases?
Sol:NoSQL databases (aka "not only SQL") are non-tabular databases and store data differently than relational tables. NoSQL databases come 
    in a variety of types based on their data model. The main types are document, key-value, wide-column, and graph.

Q.3 What is the difference between SQL and NoSQL databases?
Sol:                     SQL	                                        |                    NoSQL
    RELATIONAL DATABASE MANAGEMENT SYSTEM (RDBMS)	                |   Non-relational or distributed database system.
    These databases have fixed or static or predefined schema	    |   They have dynamic schema
    These databases are not suited for hierarchical data storage.   |	These databases are best suited for hierarchical data storage.
    These databases are best suited for complex queries.            |   These databases are not so good for complex queries
    Vertically Scalable	                                            |   Horizontally scalable
    Follows ACID property	                                        |   Follows CAP(consistency, availability, partition tolerance)
    Examples: MySQL, PostgreSQL, Oracle, MS-SQL Server, etc	        |   Examples: MongoDB, GraphQL, HBase, Neo4j, Cassandra, etc

Q.4 What are some features of MongoDB?
Sol: Features of MongoDB –
    i) Schema-less Database
    ii) Document Oriented
    iii) Indexing
    iv) Scalability
    v) Replication
    vi) Aggregation
    vii) High Performance

Q.5 What are aggregate queries?
Sol: For doing huge computations, in MongoDB, we use aggregation. Aggregation groups the data from multiple documents and provides the summed 
    up results, the average value from a large result set, min/max value from a large result set, etc. In this article, let us see how we can 
    perform Aggregation using Mongoose.

Q.6 What are pipelines in aggregation?
Sol: An aggregation pipeline consists of one or more stages that process documents: Each stage performs an operation on the input documents. 
    For example, a stage can filter documents, group documents, and calculate values. The documents that are output from a stage are passed 
    to the next stage.

Q.7 How do you do aggregate queries?
Sol: Common Aggregate Queries:- 
    i) Compute the average value from a numeric sequence
    ii) Count the number of elements in a sequence
    iii) Count the number of records (entries) in a column or table
    iv) Find the maximum value in a numeric sequence
    v) Find the minimum value in a numeric sequence
    vi) Compute the sum of values in a numeric sequence
    vii) Compute the standard deviation of a numeric sequence.

Q.8 How can you group by a particular value in MongoDB?
Sol: The $group operator is an aggregation operator or an aggregation stage, which groups multiple data or documents by some specified expression 
    and combines them into a single document. 
    Syntax: $group operator 
    {
        $group:
        {
            _id: <expression>,
            <field>: { <accumulator> : <expression> }
        }
    }
    _id: It is the field by which you want to group the documents.
    field: It is an optional parameter, and it is the computed field after performing certain accumulator operations on the grouped data.

Q.9 How can you paginate on MongoDB?
Sol: The most important use of paging implementation is it used the skip, limit, and sort in database level.
    1) Using skip and limit method.
    2) Using the find and limit method.
    3) Pagination using slice
    4) Pagination by creating an index on a specified field.
    5) Pagination by using the sort method.
    6) Pagination by using the range queries.
    7) Pagination by using the ID field.
    Example: 1) MongoDB pagination by using limit method
                db.collection_name.find () .limit (number);
            2) MongoDB pagination by using skip method
                db.collection_name.find () .skip (number);

Q.10 How can you sort in MongoDB?
Sol: Sorts all input documents and returns them to the pipeline in sorted order.
    $sort
    stage has the following prototype form:

    { $sort: { <field1>: <sort order>, <field2>: <sort order> ... } }

Q.11 What is indexing in MongoDB? Why do we need to use indexing? What are pros and cons for indexing?
Sol: Indexes are a special data structure used to locate the record in the given table very quickly without being required to traverse through 
    every record in the table. MongoDB uses these indexes to limit the number of documents that had to be searched in a collection.

    An index is a schema object that contains an entry for each value that appears in the indexed column(s) of the table or cluster and provides
    direct, fast access to rows. The users cannot see the indexes, they are just used to speed up searches/queries.

    Pros:
    i) Speed up SELECT query
    ii) Helps to make a row unique or without duplicates(primary,unique) 
    iii) If index is set to fill-text index, then we can search against large string values. for example to find a word from a sentence etc.
    
    Cons:
    i) Indexes take additional disk space.
    ii) indexes slow down INSERT,UPDATE and DELETE, but will speed up UPDATE if the WHERE condition has an indexed field.  INSERT, UPDATE and 
        DELETE becomes slower because on each operation the indexes must also be updated. 

Q.12 Write the query for indexing a field in MongoDB?
Sol: MongoDB provides a method called createIndex() that allows user to create an index. It is important in MongoDB.
    Syntax – 
        db.COLLECTION_NAME.createIndex({KEY:1}) 

Q.13 What is the improvement in performance in MongoDB?
Sol: Other ways to improve MongoDB performance after identifying your major query patterns include: Storing the results of frequent sub-queries 
     on documents to reduce read load. Making sure that you have indices on any fields you regularly query against. 
     Looking at your logs to identify slow queries, then check your indices.

Q.14 What is the data structure used for indexing?
Sol: B-trees are the most commonly used data structures for indexes as they are time-efficient for lookups, deletions, and insertions. All these
    operations can be done in logarithmic time. Data that is stored inside of a B-tree can be sorted.

Q.15 Are values sorted in indexes?
Sol: A database index is a data structure in the RDBMS that is associated with a table. It provides references to all records in the table for 
    quick lookup and filtering, and is sorted in a particular order for sorting in that order quickly.

Q.16 What are Replica Sets in MongoDB?
Sol: A replica set is a group of mongod instances that maintain the same data set. A replica set contains several data bearing nodes and 
    optionally one arbiter node. Of the data bearing nodes, one and only one member is deemed the primary node, while the other nodes are deemed 
    secondary nodes.

Q.17 Explain the structure of ObjectID in MongoDB.
Sol: The 12-byte ObjectId consists of: A 4-byte timestamp, representing the ObjectId's creation, measured in seconds since the Unix epoch. 
    A 5-byte random value generated once per process. This random value is unique to the machine and process.
    
Q.18 By default, which index is created by MongoDB for every collection?
Sol: Default _id Index: MongoDB creates a unique index on the _id field during the creation of a collection. The _id index prevents clients from 
    inserting two documents with the same value for the _id field.

Q.19 In which format MongoDB represents document structure?
Sol: MongoDB stores data records as BSON documents. It is a binary representation of JSON documents, though it contains more data types than JSON. 

Q.20 What is the limitation of a document in MongoDB?
Sol: The maximum BSON document size is 16 megabytes. The maximum document size helps ensure that a single document cannot use excessive amount 
    of RAM or, during transmission, excessive amount of bandwidth.

Q.21 What is the difference between MongoDB and Redis database?
Sol: i) It was developed by Redis labs and initially released on May 10, 2009.
        It was developed by MongoDB Inc. and initially released on 11 February, 2009.
    ii) Redis is written in ANSI and C languages.
        MongoDB is written in C++, Go, JavaScript and Python languages.
    iii) The primary database model for Redis is Key-Value Store.
        The primary database model for MongoDB is Document Store.
    iv) Redis supports secondary indexes with RediSearch module only.
        MongoDB supports secondary indexes without any restrictions.
    v) The Server-side scripting in Redis is through Lua.
        The Server-side scripting in MongoDB is through JavaScript.
    vi) Server operating systems for Redis are BDS, Linux, OS X and Windows.
        Server operating systems for MongoDB are Solaris, Linux, OS X and Windows.

Q.22 How can you add references between multiple collections?
Sol: DBRefs are references from one document to another using the value of the first document's _id field, collection name, and, optionally, its
    database name, as well as any other fields. DBRefs allow you to more easily reference documents stored in multiple collections or databases.

Q.23 What are lookup in aggregation for MongoDB?
Sol: $lookup performs an equality match on the localField to the foreignField from the documents of the from collection. If an input document 
    does not contain the localField , the $lookup treats the field as having a value of null for matching purposes.

Q.24 What are graph lookups?
Sol: 1.$graphLookup is an aggregation operation which works on the input document.
    2.$graphLookup target the search to the collections designated by the form of parameters.
    3. For-each input document, the search starts with the value designated by "startWith".
    4.$graphLookup matches the start with value against the field designated by connectToField in other documents field in the from collection.

Q.25 What is the alternative for lookups for SQL?
Sol: 

Q.26 How can you do one to many relation in MongoDB?
Sol: One to many relationships with mongoDB can easily be mapped using mongoose. Although MongoDB isn’t a relational database like PostgreSQL, 
    you can still create relationships that are either embedded or referenced. Referenced relationships are more akin to the relations using in 
    relational databases.

Q.27 How can you do many to many relation in MongoDB?
Sol: As there is no single command to implement a many-to-many relationship in a relational database, it is more difficult than a one-to-many 
    relationship. The same is true when using mongoDB to implement them. In fact, you can't use a command to create any type of relationship in 
    MongoDB.

Q.28 How can you do one to zillion relation in MongoDB?
Sol: 