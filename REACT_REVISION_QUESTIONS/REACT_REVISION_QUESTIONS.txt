Q.1  Explain redux to a 5 year old (ELI5) ?
Ans: Consider someone who has given you a task to get some chocolate out of a shopkeeper. The intention ( action ) you have in your mind is to get chocolate from the shop. In JavaScript, we can represent it as get_chocolate.
    The first step when you enter the shop is to talk to a shopkeeper and ask them to get the chocolate out of the safe. You never just go to a shop and just went straight to the store, get your chocolate, and left. 
    Redux Store ( Grocery Store ) - chocolate is kept safely in the store. The store holds the state and keeps it safe.

    Redux Actions - in the real world can be defined as a process of doing something. So in order to update anything in your state, we need to act on something. In our shop example, we need to act by talking to a shopkeeper and ask them to give you chocolate.
    The action object always has a type field that describes the action you want to perform. In our case, it is get_chocolate.

    Reducer ( Shopkeeper ) - there is no possible way of getting chocolate directly from the grocery store and we have to talk to the shopkeeper to get our chocolate. In our case, the shopkeeper is the reducer. It will go to the store and get the chocolate. The whole process is called dispatching an action.
    Reducer ( Shopkeeper ) has the knowledge of how to update the state ( get the chocolate ) and ensure states get updated ( you get the chocolate ). Reducers will always return to the new state.

    This was the whole process of geeting chocolate ( performing action ) by asking from shopkeeper ( using reducer to dispatch ) and geetting chocolate from grocery store ( Redux store ).

Q.2  What is immutability?
Ans: If an object is immutable, you cannot change its state or the value of its properties.

Q.3  What does Object.freeze() do?
Ans: The Object.freeze() method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. freeze() returns the same object that was passed in.
Eg : const obj = {
        prop: 42
     };

     Object.freeze(obj);

     obj.prop = 33;
     // Throws an error in strict mode

     console.log(obj.prop);
     // expected output: 42

Q.4  Why is immutability required by Redux?
Ans: Immutability of redux state is necessary since it allows detecting redux state changes in an efficient manner. This implies that whenever we want to modify a redux state, we must create a new copy of it and do modifications to that copy - which then becomes the new redux state.

Q.5  How does Redux use shallow equality checking?
Ans: React-Redux uses shallow equality checking to determine whether the component it's wrapping needs to be re-rendered. To do this, it assumes that the wrapped component is pure; that is, that the component will produce the same results given the same props and state.

Q.6  How well does Redux “scale” in terms of performance and architecture?
Ans: The work done by Redux generally falls into a few areas: processing actions in middleware and reducers, notifying subscribers after actions are dispatched, 
    and updating UI components based on the state changes. React Redux in particular is heavily optimized to cut down on unnecessary re-renders, and React-Redux v5 shows 
    noticeable improvements over earlier versions.
    
    Redux may not be as efficient out of the box when compared to other libraries. For maximum rendering performance in a React application, state should be stored in a normalized shape, many individual 
    components should be connected to the store instead of just a few, and connected list components should pass item IDs to their connected child list items. This minimizes the overall amount of rendering 
    to be done. Use of memoized selector functions is also an important performance consideration.

Q.7  How does Redux compare to the React Context API?
Ans: 

Q.8  What is webpack ?
Ans: webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser.

Q.9  What is treeshaking ?
Ans: Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code.
     It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.

Q.10 What are some features of using webpack?
Ans: Features of Webpack: There are many features of webpack as follows:

     Entry: We all know webpack makes a dependency graph and the starting of this graph is known as the entry or entry point. From the starting point of the dependency graph, it will follow all the dependencies to know what it has to bundle.
     Output: Output tells webpack where to put the bundles that it had made and what will be its format.
     Loaders: Loaders convert different types of files like images and CSS into a module before adding them to the dependency graph.
     Plugins: Plugins provide functionality. It can provide much functionality like printing something on running the webpack, minifying, optimization of bundles, etc.

