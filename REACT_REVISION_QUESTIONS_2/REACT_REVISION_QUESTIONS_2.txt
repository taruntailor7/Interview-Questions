Q.1  Explain redux to a 5 year old (ELI5) ?
Ans: Consider someone who has given you a task to get some chocolate out of a shopkeeper. The intention ( action ) you have in your mind is to get chocolate from the shop. In JavaScript, we can represent it as get_chocolate.
    The first step when you enter the shop is to talk to a shopkeeper and ask them to get the chocolate out of the safe. You never just go to a shop and just went straight to the store, get your chocolate, and left. 
    Redux Store ( Grocery Store ) - chocolate is kept safely in the store. The store holds the state and keeps it safe.

    Redux Actions - in the real world can be defined as a process of doing something. So in order to update anything in your state, we need to act on something. In our shop example, we need to act by talking to a shopkeeper and ask them to give you chocolate.
    The action object always has a type field that describes the action you want to perform. In our case, it is get_chocolate.

    Reducer ( Shopkeeper ) - there is no possible way of getting chocolate directly from the grocery store and we have to talk to the shopkeeper to get our chocolate. In our case, the shopkeeper is the reducer. It will go to the store and get the chocolate. The whole process is called dispatching an action.
    Reducer ( Shopkeeper ) has the knowledge of how to update the state ( get the chocolate ) and ensure states get updated ( you get the chocolate ). Reducers will always return to the new state.

    This was the whole process of geeting chocolate ( performing action ) by asking from shopkeeper ( using reducer to dispatch ) and geetting chocolate from grocery store ( Redux store ).

Q.2 How is redux different from context API?
Sol:
    _ _ _ _ _ __ _ _ _ _ _ _ _ _ __ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
    |            Context API                                 |   Redux                                                         |
    |                                                        |                                                                 |
    | i) useContext is a hook.                               |   Redux is a state management library.                          |
    | ii) It is used to share data.                          |   It is used to manage data and state.                          |
    | iii) Changes are made with the Context value.          |   Changes are made with pure functions i.e. reducers.           |
    | iv) We can change the state in it.                     |   The state is read-only. We cannot change them directly.       |
    | v) It re-renders all components whenever there         |   It only re-render the updated components.                     | 
    |    is any update in the provider’s value prop.         |                                                                 |
    |vi) It is better to use with small applications.        |   It is perfect for larger applications.                        |
    |vii) It is easy to understand and requires less code.   |   It is quite complex to understand.                            |
    |_ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _| _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ __ _ _ _ _ _ _ _ _ |

Q.3 What does useSelector do?
Sol: useSelector() ​ Allows you to extract data from the Redux store state, using a selector function.

Q.4 What is immutability?
Sol: In functional and in object-oriented programming, an object is considered as immutable when its state can’t be changed after it was created. 
    Benefits of immutable objects - they can be helpful in multi-threaded applications where multiple threads can use data represented by immutable objects without concern of the data 
    being changed by other threads.

Q5. Why do we need to spread the state in redux?
Sol: Spread operator could be use to simplify passing react props down to a component. In react redux and reducer functions, spread operator are applied to compute new state without mutating state.
     Like the Array Spread Operator, the Object Spread Operator creates a shallow clone of the original object. 

Q.6 What does Object.freeze() do?
Sol: The Object.freeze() method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer 
    be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's 
    prototype cannot be re-assigned. freeze() returns the same object that was passed in.
    EXAMPLE:- 
    const obj = {
        prop: 42
    };

    Object.freeze(obj);

    obj.prop = 33;
    // Throws an error in strict mode

    console.log(obj.prop);
    // expected output: 42

Q.7 Why is immutability required by Redux?
Sol:Immutability of redux state is necessary since it allows detecting redux state changes in an efficient manner. This implies that whenever we want to modify a redux state, we must create 
    a new copy of it and do modifications to that copy - which then becomes the new redux state.

Q.8 How does Redux use shallow equality checking?
Sol: React-Redux uses shallow equality checking to determine whether the component it's wrapping needs to be re-rendered. To do this, it assumes that the wrapped component is pure; that is, 
    that the component will produce the same results given the same props and state.

Q.9 How well does Redux “scale” in terms of performance and architecture?
Sol:The work done by Redux generally falls into a few areas: processing actions in middleware and reducers, notifying subscribers after actions are dispatched, 
    and updating UI components based on the state changes. React Redux in particular is heavily optimized to cut down on unnecessary re-renders, and React-Redux v5 shows 
    noticeable improvements over earlier versions.
    
    Redux may not be as efficient out of the box when compared to other libraries. For maximum rendering performance in a React application, state should be stored in a normalized shape, many individual 
    components should be connected to the store instead of just a few, and connected list components should pass item IDs to their connected child list items. This minimizes the overall amount of rendering 
    to be done. Use of memoized selector functions is also an important performance consideration.

Q.10 How does Redux compare to the React Context API?
Sol:    _ _ _ _ _ __ _ _ _ _ _ _ _ _ __ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        |            Context API                                 |   Redux                                                         |
        |                                                        |                                                                 |
        | i) useContext is a hook.                               |   Redux is a state management library.                          |
        | ii) It is used to share data.                          |   It is used to manage data and state.                          |
        | iii) Changes are made with the Context value.          |   Changes are made with pure functions i.e. reducers.           |
        | iv) We can change the state in it.                     |   The state is read-only. We cannot change them directly.       |
        | v) It re-renders all components whenever there         |   It only re-render the updated components.                     | 
        |    is any update in the provider’s value prop.         |                                                                 |
        |vi) It is better to use with small applications.        |   It is perfect for larger applications.                        |
        |vii) It is easy to understand and requires less code.   |   It is quite complex to understand.                            |
        |_ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _| _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ __ _ _ _ _ _ _ _ _ | 

Q.11 What is JSX?
Sol: JSX stands for JavaScript XML. It is simply a syntax extension of JavaScript. It allows us to directly write HTML in React (within JavaScript code). It is easy to create a template using JSX in React, 
    but it is not a simple template language instead it comes with the full power of JavaScript. It is faster than normal JavaScript as it performs optimizations while translating to regular JavaScript. 
    Instead of separating the markup and logic in separated files, React uses components for this purpose. 

Q.12 What is Conditional Rendering?
Sol: To create multiple components and render them based on some conditions. This is also a kind of encapsulation supported by React.

Q.13 What is tree-shaking ?
Sol: Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code.
    It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.

Q.14 What are some features of using webpack?
Sol: Features of Webpack: There are many features of webpack as follows:
    
    i) Entry: We all know webpack makes a dependency graph and the starting of this graph is known as the entry or entry point. From the starting point of the dependency graph, it will follow all the dependencies to know what it has to bundle.
    ii) Output: Output tells webpack where to put the bundles that it had made and what will be its format.
    iii) Loaders: Loaders convert different types of files like images and CSS into a module before adding them to the dependency graph.
    iv) Plugins: Plugins provide functionality. It can provide much functionality like printing something on running the webpack, minifying, optimization of bundles, etc.

Q.15 What are Controlled and Uncontrolled components?
Sol:                Controlled  Component                            |   Uncontrolled Component
    | i) The component is under control of the component’s state.	 |   Components are under the control of DOM.
    | ii) These components are predictable as are controlled by      |   Are Uncontrolled because during the life cycle methods the data may loss
    |    the state of the component.	                             |   
    | iii) Internal state is not maintained	                         |   Internal state is maintained
    | iv) It accepts the current value as props	                     |   We access the values using refs
    | v) Does not maintain its internal state.	                     |   Maintains its internal state.
    | vi) Controlled by the parent component.	                     |   Controlled by the DOM itself.
    | vii)Have better control on the form data and values	         |   Has very limited control over form values and data.

Q.16 What is flux architecture?
Sol: Flux is AN architecture that Facebook uses internally when operating with React. It is not a framework or a library. It is merely a replacement quite an 
    architecture that enhances React and also the idea of unidirectional data flow.

Q.17 What does React.useCallback do?
Sol: The useCallback hook is used when you have a component in which the child is rerendering again and again without need. Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies 
     has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders.
     Syntax:
        const memoizedCallback = useCallback(
            () => {
            doSomething(a, b);
            },
            [a, b],
        );

Q.18 What does React.memo mean?
Sol: React memo is a Higher Order Component (HOC). Memo API uses the memoization technique to optimize performance and makes the application faster. The Memo API avoids unnecessary re-renders in functional components and thereby optimizing the performance of the application.
    The Memo API is a HOC that takes in another functional component as a prop, and it will re-render the component only if there is any change in the props.
    Syntax: 
        const MeomizedComponent = React.memo(function MyAnotherComponent(props) {});


Q.19 What is Higher-order Components?
Sol: Higher-order components or HOC is the advanced method of reusing the component functionality logic. It simply takes the original component and returns the enhanced component.
    Syntax:
        const EnhancedComponent = higherOrderComponent(OriginalComponent);
    Reason to use Higher-Order component:
       i) Easy to handle
       ii) Get rid of copying the same logic in every component
       iii) Makes code more readable
